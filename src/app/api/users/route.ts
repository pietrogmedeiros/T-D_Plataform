import { NextRequest, NextResponse } from 'next/server';
import { DynamoDBService } from '@/lib/dynamodb';
import { randomUUID } from 'crypto';

export const dynamic = 'force-dynamic';

interface User {
  id: string;
  email: string;
  displayName: string;
  role: 'USER' | 'ADMIN';
  createdAt: string;
  updatedAt: string;
}

// GET - Listar todos os usu√°rios
export async function GET() {
  try {
    console.log('üì° API Users GET: Buscando usu√°rios...');
    
    const users = await DynamoDBService.getAllUsers();

    console.log('‚úÖ Usu√°rios encontrados:', users.length);
    
    // Mapear para o formato esperado pela p√°gina (name instead of displayName)
    const formattedUsers = (users as User[]).map((user: User) => ({
      id: user.id,
      email: user.email,
      name: user.displayName, // Mapear displayName para name
      role: user.role,
      createdAt: user.createdAt,
      trainingsCount: 0, // TODO: Implementar contagem real de treinamentos
    }));

    return NextResponse.json({ users: formattedUsers });
  } catch (error) {
    console.error('‚ùå Erro ao buscar usu√°rios:', error);
    return NextResponse.json(
      { error: 'Erro ao buscar usu√°rios', details: error instanceof Error ? error.message : 'Erro desconhecido' },
      { status: 500 }
    );
  }
}

// POST - Criar novo usu√°rio
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üì° API Users POST: Dados recebidos:', body);
    
    const { email, name, displayName, role } = body;
    
    // Usar 'name' ou 'displayName' (compatibilidade)
    const userDisplayName = name || displayName;

    // Valida√ß√£o b√°sica
    if (!email || !userDisplayName) {
      console.error('‚ùå Valida√ß√£o falhou:', { email, userDisplayName });
      return NextResponse.json(
        { error: 'Email e nome s√£o obrigat√≥rios' },
        { status: 400 }
      );
    }

    console.log('üîç Verificando se usu√°rio j√° existe:', email);
    
    // Verificar se o usu√°rio j√° existe
    const existingUser = await DynamoDBService.getUserByEmail(email);

    if (existingUser) {
      console.error('‚ùå Usu√°rio j√° existe:', email);
      return NextResponse.json(
        { error: 'Usu√°rio com este email j√° existe' },
        { status: 409 }
      );
    }

    console.log('‚úÖ Criando usu√°rio no DynamoDB...');
    
    // Converter role para o formato correto
    let userRole: 'USER' | 'ADMIN' = 'USER';
    if (role) {
      if (role.toLowerCase() === 'admin' || role === 'ADMIN') {
        userRole = 'ADMIN';
      } else {
        userRole = 'USER';
      }
    }
    
    console.log('üîÑ Role convertido:', { original: role, converted: userRole });
    
    const newUser: User = {
      id: randomUUID(),
      email,
      displayName: userDisplayName,
      role: userRole,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    await DynamoDBService.createUser(newUser);

    console.log('‚úÖ Usu√°rio criado com sucesso:', newUser);
    return NextResponse.json({ 
      user: {
        id: newUser.id,
        email: newUser.email,
        displayName: newUser.displayName,
        role: newUser.role,
        createdAt: newUser.createdAt,
      }, 
      message: 'Usu√°rio criado com sucesso!' 
    }, { status: 201 });
  } catch (error) {
    console.error('‚ùå Erro ao criar usu√°rio:', error);
    return NextResponse.json(
      { error: 'Erro ao criar usu√°rio', details: error instanceof Error ? error.message : 'Erro desconhecido' },
      { status: 500 }
    );
  }
}
