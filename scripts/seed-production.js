import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function seedProduction() {
  console.log('üå± Populando banco de dados de produ√ß√£o...');

  try {
    // Criar usu√°rio administrador
    const adminUser = await prisma.user.upsert({
      where: { email: 'pietro.medeiros@webcontinental.com.br' },
      update: {},
      create: {
        id: 'pietro-admin-user',
        email: 'pietro.medeiros@webcontinental.com.br',
        displayName: 'Pietro Medeiros',
        role: 'ADMIN',
      },
    });

    console.log('‚úÖ Usu√°rio admin criado:', adminUser.email);

    // Criar usu√°rio admin adicional
    const adminUser2 = await prisma.user.upsert({
      where: { email: 'admin@webcontinental.com.br' },
      update: {},
      create: {
        id: 'admin-user-1',
        email: 'admin@webcontinental.com.br',
        displayName: 'Administrador',
        role: 'ADMIN',
      },
    });

    console.log('‚úÖ Usu√°rio admin adicional criado:', adminUser2.email);

    // Criar usu√°rio de teste
    const testUser = await prisma.user.upsert({
      where: { email: 'usuario@webcontinental.com.br' },
      update: {},
      create: {
        id: 'test-user-1',
        email: 'usuario@webcontinental.com.br',
        displayName: 'Usu√°rio Teste',
        role: 'USER',
      },
    });

    console.log('‚úÖ Usu√°rio teste criado:', testUser.email);

    // Criar treinamento de exemplo com objetivos de aprendizado
    const training1 = await prisma.training.upsert({
      where: { id: 'training-seguranca-trabalho' },
      update: {},
      create: {
        id: 'training-seguranca-trabalho',
        title: 'Seguran√ßa do Trabalho - Fundamentos',
        description: `
          <p>Treinamento completo sobre <strong>seguran√ßa do trabalho</strong> para o ambiente corporativo.</p>
          <h3>M√≥dulos do Treinamento:</h3>
          <ul>
            <li>Normas regulamentadoras (NRs)</li>
            <li>Equipamentos de Prote√ß√£o Individual (EPIs)</li>
            <li>Equipamentos de Prote√ß√£o Coletiva (EPCs)</li>
            <li>Preven√ß√£o de acidentes</li>
            <li>Procedimentos de emerg√™ncia</li>
          </ul>
          <p>Este treinamento √© <em>essencial</em> para todos os colaboradores da empresa.</p>
        `,
        videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4',
        uploaderId: adminUser2.id,
        status: 'PUBLISHED',
        learningObjective1: 'Compreender as principais normas regulamentadoras',
        learningObjective2: 'Aprender o uso correto de EPIs e EPCs',
        learningObjective3: 'Desenvolver t√©cnicas de preven√ß√£o de acidentes',
        learningObjective4: 'Dominar procedimentos de emerg√™ncia',
      },
    });

    console.log('‚úÖ Treinamento 1 criado:', training1.title);

    // Criar segundo treinamento
    const training2 = await prisma.training.upsert({
      where: { id: 'training-lideranca-equipes' },
      update: {},
      create: {
        id: 'training-lideranca-equipes',
        title: 'Lideran√ßa e Gest√£o de Equipes',
        description: `
          <p>Desenvolva suas habilidades de <strong>lideran√ßa</strong> e aprenda a gerenciar equipes eficazmente.</p>
          <h3>Conte√∫do Program√°tico:</h3>
          <ol>
            <li>Fundamentos da lideran√ßa moderna</li>
            <li>Comunica√ß√£o assertiva e feedback</li>
            <li>Gest√£o de conflitos e media√ß√£o</li>
            <li>Motiva√ß√£o e engajamento de equipes</li>
            <li>Delega√ß√£o eficaz e empowerment</li>
          </ol>
          <p>Ideal para <em>gestores</em> e <em>l√≠deres</em> em desenvolvimento.</p>
        `,
        videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4',
        uploaderId: adminUser2.id,
        status: 'PUBLISHED',
        learningObjective1: 'Desenvolver habilidades de lideran√ßa moderna',
        learningObjective2: 'Aprimorar t√©cnicas de comunica√ß√£o assertiva',
        learningObjective3: 'Gerenciar conflitos de forma eficaz',
        learningObjective4: 'Motivar e engajar equipes de trabalho',
      },
    });

    console.log('‚úÖ Treinamento 2 criado:', training2.title);

    // Criar terceiro treinamento
    const training3 = await prisma.training.upsert({
      where: { id: 'training-compliance-etica' },
      update: {},
      create: {
        id: 'training-compliance-etica',
        title: 'Compliance e √âtica Empresarial',
        description: `
          <p>Treinamento sobre <strong>compliance</strong> e <strong>√©tica empresarial</strong> para uma cultura organizacional s√≥lida.</p>
          <h3>T√≥picos Abordados:</h3>
          <ul>
            <li>Conceitos fundamentais de compliance</li>
            <li>C√≥digo de √©tica da empresa</li>
            <li>Preven√ß√£o √† corrup√ß√£o e lavagem de dinheiro</li>
            <li>LGPD e prote√ß√£o de dados</li>
            <li>Canal de den√∫ncias e investiga√ß√µes</li>
          </ul>
          <p><strong>Importante:</strong> Treinamento obrigat√≥rio para todos os colaboradores.</p>
        `,
        videoUrl: 'https://www.w3schools.com/html/mov_bbb.mp4',
        uploaderId: adminUser2.id,
        status: 'PUBLISHED',
        learningObjective1: 'Entender os fundamentos do compliance',
        learningObjective2: 'Aplicar o c√≥digo de √©tica empresarial',
        learningObjective3: 'Prevenir pr√°ticas de corrup√ß√£o',
        learningObjective4: 'Proteger dados pessoais conforme LGPD',
      },
    });

    console.log('‚úÖ Treinamento 3 criado:', training3.title);

    console.log('');
    console.log('üéâ Seed de produ√ß√£o conclu√≠do com sucesso!');
    console.log('');
    console.log('üë• Usu√°rios criados:');
    console.log('  - pietro.medeiros@webcontinental.com.br (ADMIN)');
    console.log('  - admin@webcontinental.com.br (ADMIN)');
    console.log('  - usuario@webcontinental.com.br (USER)');
    console.log('');
    console.log('üìö Treinamentos criados:');
    console.log('  - Seguran√ßa do Trabalho - Fundamentos');
    console.log('  - Lideran√ßa e Gest√£o de Equipes');
    console.log('  - Compliance e √âtica Empresarial');
    console.log('');

  } catch (error) {
    console.error('‚ùå Erro no seed:', error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// Executar apenas se o script for chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  seedProduction();
}

export default seedProduction;
